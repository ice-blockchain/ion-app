// dart format width=80
import 'package:drift/internal/versioned_schema.dart' as i0;
import 'package:drift/drift.dart' as i1;
import 'package:drift/drift.dart'; // ignore_for_file: type=lint,unused_import

// GENERATED BY drift_dev, DO NOT MODIFY.
final class Schema2 extends i0.VersionedSchema {
  Schema2({required super.database}) : super(version: 2);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    conversationTable,
    eventMessageTable,
    conversationMessageTable,
    messageStatusTable,
    reactionTable,
  ];
  late final Shape0 conversationTable = Shape0(
      source: i0.VersionedTable(
        entityName: 'conversation_table',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_2,
          _column_3,
          _column_4,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape1 eventMessageTable = Shape1(
      source: i0.VersionedTable(
        entityName: 'event_message_table',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_5,
          _column_6,
          _column_7,
          _column_8,
          _column_9,
          _column_10,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape2 conversationMessageTable = Shape2(
      source: i0.VersionedTable(
        entityName: 'conversation_message_table',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(event_message_id)',
        ],
        columns: [
          _column_11,
          _column_12,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape3 messageStatusTable = Shape3(
      source: i0.VersionedTable(
        entityName: 'message_status_table',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_13,
          _column_12,
          _column_14,
          _column_15,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape4 reactionTable = Shape4(
      source: i0.VersionedTable(
        entityName: 'reaction_table',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_13,
          _column_9,
          _column_14,
          _column_4,
          _column_12,
        ],
        attachedDatabase: database,
      ),
      alias: null);
}

class Shape0 extends i0.VersionedTable {
  Shape0({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id => columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get type => columnsByName['type']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<DateTime> get joinedAt =>
      columnsByName['joined_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<bool> get isArchived =>
      columnsByName['is_archived']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<bool> get isDeleted =>
      columnsByName['is_deleted']! as i1.GeneratedColumn<bool>;
}

i1.GeneratedColumn<String> _column_0(String aliasedName) =>
    i1.GeneratedColumn<String>('id', aliasedName, false, type: i1.DriftSqlType.string);
i1.GeneratedColumn<int> _column_1(String aliasedName) =>
    i1.GeneratedColumn<int>('type', aliasedName, false, type: i1.DriftSqlType.int);
i1.GeneratedColumn<DateTime> _column_2(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('joined_at', aliasedName, false, type: i1.DriftSqlType.dateTime);
i1.GeneratedColumn<bool> _column_3(String aliasedName) => i1.GeneratedColumn<bool>(
    'is_archived', aliasedName, false,
    type: i1.DriftSqlType.bool,
    defaultConstraints: i1.GeneratedColumn.constraintIsAlways('CHECK ("is_archived" IN (0, 1))'),
    defaultValue: const CustomExpression('0'));
i1.GeneratedColumn<bool> _column_4(String aliasedName) =>
    i1.GeneratedColumn<bool>('is_deleted', aliasedName, false,
        type: i1.DriftSqlType.bool,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways('CHECK ("is_deleted" IN (0, 1))'),
        defaultValue: const CustomExpression('0'));

class Shape1 extends i0.VersionedTable {
  Shape1({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id => columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get sig => columnsByName['sig']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get tags => columnsByName['tags']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get pubkey => columnsByName['pubkey']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get kind => columnsByName['kind']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get content => columnsByName['content']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get createdAt =>
      columnsByName['created_at']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<String> _column_5(String aliasedName) =>
    i1.GeneratedColumn<String>('sig', aliasedName, true, type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_6(String aliasedName) =>
    i1.GeneratedColumn<String>('tags', aliasedName, false, type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_7(String aliasedName) =>
    i1.GeneratedColumn<String>('pubkey', aliasedName, false, type: i1.DriftSqlType.string);
i1.GeneratedColumn<int> _column_8(String aliasedName) =>
    i1.GeneratedColumn<int>('kind', aliasedName, false, type: i1.DriftSqlType.int);
i1.GeneratedColumn<String> _column_9(String aliasedName) =>
    i1.GeneratedColumn<String>('content', aliasedName, false, type: i1.DriftSqlType.string);
i1.GeneratedColumn<DateTime> _column_10(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('created_at', aliasedName, false, type: i1.DriftSqlType.dateTime);

class Shape2 extends i0.VersionedTable {
  Shape2({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get conversationId =>
      columnsByName['conversation_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get eventMessageId =>
      columnsByName['event_message_id']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_11(String aliasedName) =>
    i1.GeneratedColumn<String>('conversation_id', aliasedName, false,
        type: i1.DriftSqlType.string,
        defaultConstraints:
            i1.GeneratedColumn.constraintIsAlways('REFERENCES conversation_table (id)'));
i1.GeneratedColumn<String> _column_12(String aliasedName) =>
    i1.GeneratedColumn<String>('event_message_id', aliasedName, false,
        type: i1.DriftSqlType.string,
        defaultConstraints:
            i1.GeneratedColumn.constraintIsAlways('REFERENCES event_message_table (id)'));

class Shape3 extends i0.VersionedTable {
  Shape3({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id => columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get eventMessageId =>
      columnsByName['event_message_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get masterPubkey =>
      columnsByName['master_pubkey']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get status => columnsByName['status']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<int> _column_13(String aliasedName) =>
    i1.GeneratedColumn<int>('id', aliasedName, false,
        hasAutoIncrement: true,
        type: i1.DriftSqlType.int,
        defaultConstraints: i1.GeneratedColumn.constraintIsAlways('PRIMARY KEY AUTOINCREMENT'));
i1.GeneratedColumn<String> _column_14(String aliasedName) =>
    i1.GeneratedColumn<String>('master_pubkey', aliasedName, false, type: i1.DriftSqlType.string);
i1.GeneratedColumn<int> _column_15(String aliasedName) =>
    i1.GeneratedColumn<int>('status', aliasedName, false, type: i1.DriftSqlType.int);

class Shape4 extends i0.VersionedTable {
  Shape4({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id => columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get content => columnsByName['content']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get masterPubkey =>
      columnsByName['master_pubkey']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get isDeleted =>
      columnsByName['is_deleted']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<String> get eventMessageId =>
      columnsByName['event_message_id']! as i1.GeneratedColumn<String>;
}

final class Schema3 extends i0.VersionedSchema {
  Schema3({required super.database}) : super(version: 3);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    conversationTable,
    eventMessageTable,
    conversationMessageTable,
    messageStatusTable,
    reactionTable,
  ];
  late final Shape0 conversationTable = Shape0(
      source: i0.VersionedTable(
        entityName: 'conversation_table',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_2,
          _column_3,
          _column_4,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape1 eventMessageTable = Shape1(
      source: i0.VersionedTable(
        entityName: 'event_message_table',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_5,
          _column_6,
          _column_7,
          _column_8,
          _column_9,
          _column_10,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape2 conversationMessageTable = Shape2(
      source: i0.VersionedTable(
        entityName: 'conversation_message_table',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(event_message_id)',
        ],
        columns: [
          _column_11,
          _column_12,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape3 messageStatusTable = Shape3(
      source: i0.VersionedTable(
        entityName: 'message_status_table',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_13,
          _column_12,
          _column_14,
          _column_15,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape5 reactionTable = Shape5(
      source: i0.VersionedTable(
        entityName: 'reaction_table',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_16,
          _column_17,
          _column_9,
          _column_14,
          _column_4,
        ],
        attachedDatabase: database,
      ),
      alias: null);
}

class Shape5 extends i0.VersionedTable {
  Shape5({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id => columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get kind14Id =>
      columnsByName['kind14_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get content => columnsByName['content']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get masterPubkey =>
      columnsByName['master_pubkey']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get isDeleted =>
      columnsByName['is_deleted']! as i1.GeneratedColumn<bool>;
}

i1.GeneratedColumn<String> _column_16(String aliasedName) =>
    i1.GeneratedColumn<String>('id', aliasedName, false,
        type: i1.DriftSqlType.string,
        defaultConstraints:
            i1.GeneratedColumn.constraintIsAlways('REFERENCES event_message_table (id)'));
i1.GeneratedColumn<String> _column_17(String aliasedName) =>
    i1.GeneratedColumn<String>('kind14_id', aliasedName, false,
        type: i1.DriftSqlType.string,
        defaultConstraints:
            i1.GeneratedColumn.constraintIsAlways('REFERENCES event_message_table (id)'));

final class Schema4 extends i0.VersionedSchema {
  Schema4({required super.database}) : super(version: 4);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    conversationTable,
    eventMessageTable,
    conversationMessageTable,
    messageStatusTable,
    reactionTable,
    messageMediaTable,
  ];
  late final Shape0 conversationTable = Shape0(
      source: i0.VersionedTable(
        entityName: 'conversation_table',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_2,
          _column_3,
          _column_4,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape1 eventMessageTable = Shape1(
      source: i0.VersionedTable(
        entityName: 'event_message_table',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_5,
          _column_6,
          _column_7,
          _column_8,
          _column_9,
          _column_10,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape2 conversationMessageTable = Shape2(
      source: i0.VersionedTable(
        entityName: 'conversation_message_table',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(event_message_id)',
        ],
        columns: [
          _column_11,
          _column_12,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape3 messageStatusTable = Shape3(
      source: i0.VersionedTable(
        entityName: 'message_status_table',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_13,
          _column_12,
          _column_14,
          _column_15,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape5 reactionTable = Shape5(
      source: i0.VersionedTable(
        entityName: 'reaction_table',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_16,
          _column_17,
          _column_9,
          _column_14,
          _column_4,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape6 messageMediaTable = Shape6(
      source: i0.VersionedTable(
        entityName: 'message_media_table',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [],
        columns: [
          _column_13,
          _column_15,
          _column_12,
          _column_18,
          _column_19,
          _column_20,
        ],
        attachedDatabase: database,
      ),
      alias: null);
}

class Shape6 extends i0.VersionedTable {
  Shape6({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<int> get id => columnsByName['id']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<int> get status => columnsByName['status']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get eventMessageId =>
      columnsByName['event_message_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get mediaAttachment =>
      columnsByName['media_attachment']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get remoteUrl =>
      columnsByName['remote_url']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get localUrl =>
      columnsByName['local_url']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_18(String aliasedName) =>
    i1.GeneratedColumn<String>('media_attachment', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_19(String aliasedName) =>
    i1.GeneratedColumn<String>('remote_url', aliasedName, true, type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_20(String aliasedName) =>
    i1.GeneratedColumn<String>('local_url', aliasedName, true, type: i1.DriftSqlType.string);
i0.MigrationStepWithVersion migrationSteps({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
  required Future<void> Function(i1.Migrator m, Schema3 schema) from2To3,
  required Future<void> Function(i1.Migrator m, Schema4 schema) from3To4,
}) {
  return (currentVersion, database) async {
    switch (currentVersion) {
      case 1:
        final schema = Schema2(database: database);
        final migrator = i1.Migrator(database, schema);
        await from1To2(migrator, schema);
        return 2;
      case 2:
        final schema = Schema3(database: database);
        final migrator = i1.Migrator(database, schema);
        await from2To3(migrator, schema);
        return 3;
      case 3:
        final schema = Schema4(database: database);
        final migrator = i1.Migrator(database, schema);
        await from3To4(migrator, schema);
        return 4;
      default:
        throw ArgumentError.value('Unknown migration from $currentVersion');
    }
  };
}

i1.OnUpgrade stepByStep({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
  required Future<void> Function(i1.Migrator m, Schema3 schema) from2To3,
  required Future<void> Function(i1.Migrator m, Schema4 schema) from3To4,
}) =>
    i0.VersionedSchema.stepByStepHelper(
        step: migrationSteps(
      from1To2: from1To2,
      from2To3: from2To3,
      from3To4: from3To4,
    ));
