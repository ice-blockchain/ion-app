// SPDX-License-Identifier: ice License 1.0

// dart format width=80
import 'package:drift/internal/versioned_schema.dart' as i0;
import 'package:drift/drift.dart' as i1;
import 'package:drift/drift.dart'; // ignore_for_file: type=lint,unused_import

// GENERATED BY drift_dev, DO NOT MODIFY.
final class Schema2 extends i0.VersionedSchema {
  Schema2({required super.database}) : super(version: 2);
  @override
  late final List<i1.DatabaseSchemaEntity> entities = [
    coinsTable,
    syncCoinsTable,
    networksTable,
    transactionsTable,
  ];
  late final Shape0 coinsTable = Shape0(
      source: i0.VersionedTable(
        entityName: 'coins_table',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_1,
          _column_2,
          _column_3,
          _column_4,
          _column_5,
          _column_6,
          _column_7,
          _column_8,
          _column_9,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape1 syncCoinsTable = Shape1(
      source: i0.VersionedTable(
        entityName: 'sync_coins_table',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(coin_id)',
        ],
        columns: [
          _column_10,
          _column_11,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape2 networksTable = Shape2(
      source: i0.VersionedTable(
        entityName: 'networks_table',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(id)',
        ],
        columns: [
          _column_0,
          _column_12,
          _column_13,
          _column_14,
          _column_15,
        ],
        attachedDatabase: database,
      ),
      alias: null);
  late final Shape3 transactionsTable = Shape3(
      source: i0.VersionedTable(
        entityName: 'transactions_table',
        withoutRowId: false,
        isStrict: false,
        tableConstraints: [
          'PRIMARY KEY(tx_hash)',
        ],
        columns: [
          _column_16,
          _column_17,
          _column_5,
          _column_18,
          _column_19,
          _column_20,
          _column_21,
          _column_22,
          _column_23,
          _column_24,
          _column_25,
          _column_26,
          _column_27,
          _column_28,
          _column_29,
          _column_30,
          _column_31,
        ],
        attachedDatabase: database,
      ),
      alias: null);
}

class Shape0 extends i0.VersionedTable {
  Shape0({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id => columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get contractAddress =>
      columnsByName['contract_address']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get decimals => columnsByName['decimals']! as i1.GeneratedColumn<int>;
  i1.GeneratedColumn<String> get iconURL =>
      columnsByName['icon_u_r_l']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get name => columnsByName['name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get networkId =>
      columnsByName['network_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<double> get priceUSD =>
      columnsByName['price_u_s_d']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<String> get symbol => columnsByName['symbol']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get symbolGroup =>
      columnsByName['symbol_group']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<int> get syncFrequency =>
      columnsByName['sync_frequency']! as i1.GeneratedColumn<int>;
}

i1.GeneratedColumn<String> _column_0(String aliasedName) =>
    i1.GeneratedColumn<String>('id', aliasedName, false, type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_1(String aliasedName) =>
    i1.GeneratedColumn<String>('contract_address', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<int> _column_2(String aliasedName) =>
    i1.GeneratedColumn<int>('decimals', aliasedName, false, type: i1.DriftSqlType.int);
i1.GeneratedColumn<String> _column_3(String aliasedName) =>
    i1.GeneratedColumn<String>('icon_u_r_l', aliasedName, false, type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_4(String aliasedName) =>
    i1.GeneratedColumn<String>('name', aliasedName, false, type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_5(String aliasedName) =>
    i1.GeneratedColumn<String>('network_id', aliasedName, false, type: i1.DriftSqlType.string);
i1.GeneratedColumn<double> _column_6(String aliasedName) =>
    i1.GeneratedColumn<double>('price_u_s_d', aliasedName, false, type: i1.DriftSqlType.double);
i1.GeneratedColumn<String> _column_7(String aliasedName) =>
    i1.GeneratedColumn<String>('symbol', aliasedName, false, type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_8(String aliasedName) =>
    i1.GeneratedColumn<String>('symbol_group', aliasedName, false, type: i1.DriftSqlType.string);
i1.GeneratedColumn<int> _column_9(String aliasedName) =>
    i1.GeneratedColumn<int>('sync_frequency', aliasedName, false, type: i1.DriftSqlType.int);

class Shape1 extends i0.VersionedTable {
  Shape1({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get coinId => columnsByName['coin_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get syncAfter =>
      columnsByName['sync_after']! as i1.GeneratedColumn<DateTime>;
}

i1.GeneratedColumn<String> _column_10(String aliasedName) =>
    i1.GeneratedColumn<String>('coin_id', aliasedName, false, type: i1.DriftSqlType.string);
i1.GeneratedColumn<DateTime> _column_11(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('sync_after', aliasedName, false, type: i1.DriftSqlType.dateTime);

class Shape2 extends i0.VersionedTable {
  Shape2({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get id => columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get image => columnsByName['image']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<bool> get isTestnet =>
      columnsByName['is_testnet']! as i1.GeneratedColumn<bool>;
  i1.GeneratedColumn<String> get displayName =>
      columnsByName['display_name']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get explorerUrl =>
      columnsByName['explorer_url']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_12(String aliasedName) =>
    i1.GeneratedColumn<String>('image', aliasedName, false, type: i1.DriftSqlType.string);
i1.GeneratedColumn<bool> _column_13(String aliasedName) => i1.GeneratedColumn<bool>(
    'is_testnet', aliasedName, false,
    type: i1.DriftSqlType.bool,
    defaultConstraints: i1.GeneratedColumn.constraintIsAlways('CHECK ("is_testnet" IN (0, 1))'));
i1.GeneratedColumn<String> _column_14(String aliasedName) =>
    i1.GeneratedColumn<String>('display_name', aliasedName, false, type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_15(String aliasedName) =>
    i1.GeneratedColumn<String>('explorer_url', aliasedName, false, type: i1.DriftSqlType.string);

class Shape3 extends i0.VersionedTable {
  Shape3({required super.source, required super.alias}) : super.aliased();
  i1.GeneratedColumn<String> get type => columnsByName['type']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get txHash => columnsByName['tx_hash']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get networkId =>
      columnsByName['network_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get coinId => columnsByName['coin_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get senderWalletAddress =>
      columnsByName['sender_wallet_address']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get receiverWalletAddress =>
      columnsByName['receiver_wallet_address']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get id => columnsByName['id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get fee => columnsByName['fee']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get status => columnsByName['status']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get nativeCoinId =>
      columnsByName['native_coin_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<DateTime> get dateConfirmed =>
      columnsByName['date_confirmed']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<DateTime> get createdAt =>
      columnsByName['created_at']! as i1.GeneratedColumn<DateTime>;
  i1.GeneratedColumn<String> get userPubkey =>
      columnsByName['user_pubkey']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get assetId =>
      columnsByName['asset_id']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<String> get transferredAmount =>
      columnsByName['transferred_amount']! as i1.GeneratedColumn<String>;
  i1.GeneratedColumn<double> get transferredAmountUsd =>
      columnsByName['transferred_amount_usd']! as i1.GeneratedColumn<double>;
  i1.GeneratedColumn<String> get balanceBeforeTransfer =>
      columnsByName['balance_before_transfer']! as i1.GeneratedColumn<String>;
}

i1.GeneratedColumn<String> _column_16(String aliasedName) =>
    i1.GeneratedColumn<String>('type', aliasedName, false, type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_17(String aliasedName) =>
    i1.GeneratedColumn<String>('tx_hash', aliasedName, false, type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_18(String aliasedName) =>
    i1.GeneratedColumn<String>('coin_id', aliasedName, true, type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_19(String aliasedName) =>
    i1.GeneratedColumn<String>('sender_wallet_address', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_20(String aliasedName) =>
    i1.GeneratedColumn<String>('receiver_wallet_address', aliasedName, false,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_21(String aliasedName) =>
    i1.GeneratedColumn<String>('id', aliasedName, true, type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_22(String aliasedName) =>
    i1.GeneratedColumn<String>('fee', aliasedName, true, type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_23(String aliasedName) =>
    i1.GeneratedColumn<String>('status', aliasedName, true, type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_24(String aliasedName) =>
    i1.GeneratedColumn<String>('native_coin_id', aliasedName, true, type: i1.DriftSqlType.string);
i1.GeneratedColumn<DateTime> _column_25(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('date_confirmed', aliasedName, true,
        type: i1.DriftSqlType.dateTime);
i1.GeneratedColumn<DateTime> _column_26(String aliasedName) =>
    i1.GeneratedColumn<DateTime>('created_at', aliasedName, true, type: i1.DriftSqlType.dateTime);
i1.GeneratedColumn<String> _column_27(String aliasedName) =>
    i1.GeneratedColumn<String>('user_pubkey', aliasedName, true, type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_28(String aliasedName) =>
    i1.GeneratedColumn<String>('asset_id', aliasedName, true, type: i1.DriftSqlType.string);
i1.GeneratedColumn<String> _column_29(String aliasedName) =>
    i1.GeneratedColumn<String>('transferred_amount', aliasedName, true,
        type: i1.DriftSqlType.string);
i1.GeneratedColumn<double> _column_30(String aliasedName) =>
    i1.GeneratedColumn<double>('transferred_amount_usd', aliasedName, true,
        type: i1.DriftSqlType.double);
i1.GeneratedColumn<String> _column_31(String aliasedName) =>
    i1.GeneratedColumn<String>('balance_before_transfer', aliasedName, true,
        type: i1.DriftSqlType.string);
i0.MigrationStepWithVersion migrationSteps({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
}) {
  return (currentVersion, database) async {
    switch (currentVersion) {
      case 1:
        final schema = Schema2(database: database);
        final migrator = i1.Migrator(database, schema);
        await from1To2(migrator, schema);
        return 2;
      default:
        throw ArgumentError.value('Unknown migration from $currentVersion');
    }
  };
}

i1.OnUpgrade stepByStep({
  required Future<void> Function(i1.Migrator m, Schema2 schema) from1To2,
}) =>
    i0.VersionedSchema.stepByStepHelper(
        step: migrationSteps(
      from1To2: from1To2,
    ));
